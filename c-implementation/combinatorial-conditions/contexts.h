#ifndef CONTEXTS_H
#define CONTEXTS_H
#include "../utils/bin/bin.h"

// A context is a finite collection of data associated with every node in a binary
// tree. The idea is that, given the context of a node, we are able to decide if
// it has a left or right child, and, if so, produce the contexts for those children.
// Thus, given the context of the root node, we are able to generate an arbitrarly 
// large tree. See gen_tree.h for generating a tree from a root context.

// The tree generated by a context corresponds to a family of words satisfying 
// a combinatorial condition. 

////////////////////////////////////////////////////////////////////////////////
typedef struct higher_gap_context {


} higher_gap_context_t;

////////////////////////////////////////////////////////////////////////////////

typedef struct recurring_gap_context {
    int gaps_depth;
    int *index;
    int *last_letter;
    bin_t **gap_bins;
    int *last_recurrence;
} recurring_gap_context_t;

void *new_recurring_gap_context(int *gap_bounds, int gaps_depth);

recurring_gap_context_t *copy_recurring_gap_context(recurring_gap_context_t *src);

void *get_recurring_gap_context(void *context, int direction);

#endif